<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { HttpParams } from '@angular/common/http';
import { FilterMatchMode, FilterMetadata, LazyLoadEvent } from 'primeng/api';
import { ITEMS_PER_PAGE } from '../../config/pagination.constants';
import { flatten, unflatten } from 'flat';
import { Params } from '@angular/router';
import { Table } from 'primeng/table';

export const createRequestOption = (req?: any): HttpParams => {
  let options: HttpParams = new HttpParams();

  if (req) {
    Object.keys(req).forEach(key => {
      if (key !== 'sort') {
        options = options.set(key, req[key]);
      }
    });

    if (req.sort) {
      req.sort.forEach((val: string) => {
        options = options.append('sort', val);
      });
    }
  }

  return options;
};

export const lazyLoadEventToServerQueryParams = (event?: LazyLoadEvent, globalFilter = 'globalFilter'): { [_: string]: any } => {
  const params: { [index: string]: any } = {};
  if (event) {
    if (event.filters) {
      for (const filterName of Object.keys(event.filters)) {
        let filters: FilterMetadata[];
        if (!Array.isArray(event.filters[filterName])) {
          filters = [event.filters[filterName]];
        } else {
          filters = event.filters[filterName] as FilterMetadata[];
        }
        filters.forEach(filter => {
          if (filter.value) {
            let matchMode = filter.matchMode;
            if (matchMode) {
              if (matchModes.has(matchMode)) {
                matchMode = matchModes.get(matchMode);
              }
              params[`${filterName}.${matchMode!}`] = filter.value;
            } else {
              params[filterName] = filter.value;
            }
          }
        });
      }
    }
    if (event.globalFilter && globalFilter) {
      params[globalFilter] = event.globalFilter;
    }
    if (event.multiSortMeta) {
      params['sort'] = event.multiSortMeta.map(s => s.field + (s.order === -1 ? ',desc' : ',asc'));
    }
    params['page'] = (event.first ?? 0) / (event.rows ?? ITEMS_PER_PAGE);
    params['size'] = event.rows ?? ITEMS_PER_PAGE;
  } else {
    params['size'] = ITEMS_PER_PAGE;
  }
  return params;
};

export const fillTableFromQueryParams = (table: Table, queryParams: Params, filtersDetails: { [_: string]: { type: string } }): void => {
  const params: any = unflatten(queryParams);
  table.first = +queryParams.first || 0;
  table.multiSortMeta = (params['msm'] || []).map((sm: any) => ({ field: sm.field, order: +sm.order }));
  const filters: { [_: string]: FilterMetadata | FilterMetadata[] } = {};
  if (params['f']) {
    Object.entries(flatten(params['f'], { safe: true })).forEach(([field, value]) => {
      let filterName = field;
      let filterValue = value;
      if (filterName === 'globalFilter') {
        filters[filterName] = {
          value: filterName,
        };
      } else {
        const matchMode = Array.from(matchModes.keys()).find(mm => field.endsWith(`.${mm}`));
        if (matchMode) {
          filterName = field.slice(0, -matchMode.length - 1); // -1 for the dot (.)
        }
        if (matchMode === FilterMatchMode.IN) {
          filterValue = (value as string).split(',');
          filterValue = (filterValue as string[]).map(fv => deserializeFilter(fv, filtersDetails[filterName].type));
        } else {
          filterValue = deserializeFilter(filterValue as string, filtersDetails[filterName].type);
        }
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        if (!filters[filterName]) {
          filters[filterName] = [];
        }
        (filters[filterName] as FilterMetadata[]).push({
          value: filterValue,
          matchMode,
        });
      }
    });
  }
  Object.assign(table.filters, filters);
};

export const lazyLoadEventToRouterQueryParams = (event: LazyLoadEvent, filtersDetails: { [_: string]: { type: string } }): Params => {
  const queryParams: { [_: string]: any } = {};
  if (event.first) {
    queryParams['first'] = event.first;
  }
  if (event.multiSortMeta?.length) {
    queryParams['msm'] = event.multiSortMeta;
  }
  if (event.filters) {
    Object.entries(event.filters).forEach(([field, filterMetas]: [string, FilterMetadata | FilterMetadata[]]) => {
      if (!Array.isArray(filterMetas)) {
        filterMetas = [filterMetas];
      }
      filterMetas.forEach(filter => {
        let filterValue = filter.value;
        if (filterValue) {
          const matchMode = filter.matchMode;
          if (matchMode === 'in') {
            filterValue = filterValue.map((v: any) => serializeFilter(v, filtersDetails[field].type));
            filterValue = filterValue.join(',');
          } else {
            serializeFilter(filterValue, filtersDetails[field].type);
          }
          const paramKey = matchMode ? `f.${field}.${matchMode}` : `f.${field}`;
          queryParams[paramKey] = filterValue;
        }
      });
    });
  }
  return flatten(queryParams);
};

const serializeFilter = (value: any, type: string): string => {
  if (type === 'number') {
    return `${value as number}`;
  }
  if (type === 'date') {
    return value.toISOString() as string;
  }
  if (type === 'boolean') {
    return value ? 'true' : 'false';
  }
  return value as string;
};

const deserializeFilter = (value: string, type: string): number | Date | boolean | string => {
  if (type === 'number') {
    return +value;
  }
  if (type === 'date') {
    return new Date(value);
  }
  if (type === 'boolean') {
    return value === 'true';
  }
  return value;
};

const matchModes = new Map([
  [FilterMatchMode.STARTS_WITH, 'contains'],
  [FilterMatchMode.CONTAINS, 'contains'],
  [FilterMatchMode.ENDS_WITH, 'contains'],
  [FilterMatchMode.EQUALS, 'equals'],
  [FilterMatchMode.NOT_EQUALS, 'notEquals'],
  [FilterMatchMode.IN, 'in'],
  [FilterMatchMode.LESS_THAN, 'lessThan'],
  [FilterMatchMode.LESS_THAN_OR_EQUAL_TO, 'lessThanOrEqual'],
  [FilterMatchMode.GREATER_THAN, 'greaterThan'],
  [FilterMatchMode.GREATER_THAN_OR_EQUAL_TO, 'greaterThanOrEqual'],
  [FilterMatchMode.IS, 'equals'],
  [FilterMatchMode.IS_NOT, 'notEquals'],
  [FilterMatchMode.BEFORE, 'lessThan'],
  [FilterMatchMode.AFTER, 'greaterThan'],
]);
