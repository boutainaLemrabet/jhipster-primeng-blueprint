<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
let searchType = 'Search';
if (pagination === 'pagination' || pagination === 'infinite-scroll') {
    searchType = 'SearchWithPagination';
}
_%>
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
<%_ if (fieldsContainDate) { _%>
import { map } from 'rxjs/operators';
<%_ } _%>
<%_ if (fieldsContainLocalDate) { _%>
import { DatePipe } from '@angular/common';
import { DATE_FORMAT } from 'app/config/input.constants';
<%_ } _%>
import { ApplicationConfigService } from 'app/core/config/application-config.service';
import { createRequestOption } from 'app/core/request/request-util';
<%_ if (searchEngine !== false) { _%>
import { <%= searchType %> } from 'app/core/request/request.model';
<%_ } _%>
import { I<%= entityAngularName %>, get<%= entityAngularName %>Identifier } from '../<%= entityFileName %>.model';

export type EntityResponseType = HttpResponse<I<%= entityAngularName %>>;
export type EntityArrayResponseType = HttpResponse<I<%= entityAngularName %>[]>;

@Injectable({ providedIn: 'root' })
export class <%= entityAngularName %>Service {
    public resourceUrl = this.applicationConfigService.getEndpointFor('api/<%= entityApiUrl %>'<% if (applicationType === 'gateway' && locals.microserviceName) { %>, '<%= microserviceName.toLowerCase() %>'<% } %>);
    <%_ if (searchEngine !== false) { _%>
    public resourceSearchUrl = this.applicationConfigService.getEndpointFor('api/_search/<%= entityApiUrl %>'<% if (applicationType === 'gateway' && locals.microserviceName) { %>, '<%= microserviceName.toLowerCase() %>'<% } %>);
    <%_ } _%>

    constructor(protected http: HttpClient, private applicationConfigService: ApplicationConfigService<% if (fieldsContainLocalDate) { %>, protected datePipe: DatePipe<% } %>) {}

    <%_ if (!readOnly) { _%>
    create(<%= entityInstance %>: I<%= entityAngularName %>): Observable<EntityResponseType> {
        <%_ if (fieldsContainDate) { _%>
        const copy = this.convertDateFromClient(<%= entityInstance %>);
        <%_ } _%>
        return this.http.post<I<%= entityAngularName %>>(this.resourceUrl,
                <% if (fieldsContainDate) { %> copy <% } else { %> <%= entityInstance %> <% } %>,
                { observe: 'response' })
        <% if (fieldsContainDate) { %>.pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)))<% } %>;
    }

    update(<%= entityInstance %>: I<%= entityAngularName %>): Observable<EntityResponseType> {
        <%_ if (fieldsContainDate) { _%>
        const copy = this.convertDateFromClient(<%= entityInstance %>);
        <%_ } _%>
        return this.http.put<I<%= entityAngularName %>>(`${this.resourceUrl}/${get<%= entityAngularName %>Identifier(<%= entityInstance %>)!}`,
                <% if (fieldsContainDate) { %> copy <% } else { %> <%= entityInstance %> <% } %>,
                { observe: 'response' })
        <% if (fieldsContainDate) { %>.pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)))<% } %>;
    }

    partialUpdate(<%= entityInstance %>: I<%= entityAngularName %>): Observable<EntityResponseType> {
        <%_ if (fieldsContainDate) { _%>
        const copy = this.convertDateFromClient(<%= entityInstance %>);
        <%_ } _%>
        return this.http.patch<I<%= entityAngularName %>>(`${this.resourceUrl}/${get<%= entityAngularName %>Identifier(<%= entityInstance %>)!}`,
                <% if (fieldsContainDate) { %> copy <% } else { %> <%= entityInstance %> <% } %>,
                { observe: 'response' })
        <% if (fieldsContainDate) { %>.pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)))<% } %>;
    }
    <%_ } _%>

    find(<%= entity.primaryKey.ids.map(pk => `${pk.name}: ${this.getTypescriptKeyType(pk.field.fieldType)}`).join(', ') %>): Observable<EntityResponseType> {
        return this.http.get<I<%= entityAngularName %>>(`${this.resourceUrl}/<%-entity.primaryKey.ids.length === 1 ? '${'+entity.primaryKey.ids[0].name+'}' : entity.primaryKey.ids.map(pk => pk.name+'=${'+pk.name+'}').join(';')%>`, { observe: 'response' })
            <% if (fieldsContainDate) { %>.pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)))<% } %>;
    }

    query(req?: any): Observable<EntityArrayResponseType> {
        const options = createRequestOption(req);
        return this.http.get<I<%= entityAngularName %>[]>(this.resourceUrl, { params: options, observe: 'response' })
            <% if (fieldsContainDate) { %>.pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)))<% } %>;
    }

    <%_ if (!readOnly) { _%>
    delete(<%= entity.primaryKey.ids.map(pk => `${pk.name}: ${this.getTypescriptKeyType(pk.field.fieldType)}`).join(', ') %>): Observable<HttpResponse<{}>> {
        return this.http.delete(`${this.resourceUrl}/<%-entity.primaryKey.ids.length === 1 ? '${'+entity.primaryKey.ids[0].name+'}' : entity.primaryKey.ids.map(pk => pk.name+'=${'+pk.name+'}').join(';')%>`, { observe: 'response' });
    }
    <%_ } _%>

    <%_ if (searchEngine !== false) { _%>
    search(req: <%= searchType %>): Observable<EntityArrayResponseType> {
        const options = createRequestOption(req);
        return this.http.get<I<%= entityAngularName %>[]>(this.resourceSearchUrl, { params: options, observe: 'response' })
            <% if (fieldsContainDate) { %>.pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)))<% } %>;
    }
    <%_ } _%>

<%_ if (fieldsContainDate) { _%>
    protected convertDateFromClient(<%= entityInstance %>: I<%= entityAngularName %>): I<%= entityAngularName %> {
        return Object.assign({}, <%= entityInstance %>, {
    <%_ for (const field of fields) { _%>
        <%_ if ( ['Instant', 'ZonedDateTime'].includes(field.fieldType) ) { _%>
        <%= field.fieldName %>: <%= entityInstance %>.<%= field.fieldName %> != null ? <%= entityInstance %>.<%= field.fieldName %>.toJSON() : undefined,
        <%_ } _%>
        <%_ if ( field.fieldType === 'LocalDate' ) { _%>
        <%= field.fieldName %>: <%= entityInstance %>.<%= field.fieldName %> != null ? this.datePipe.transform(<%= entityInstance %>.<%= field.fieldName %>, DATE_FORMAT) : undefined,
        <%_ } _%>
    <%_ } _%>
        });
    }

    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {
        if (res.body) {
        <%_ for (const field of fields) { _%>
            <%_ if ( ['Instant', 'ZonedDateTime', 'LocalDate'].includes(field.fieldType) ) { _%>
            res.body.<%= field.fieldName %> = res.body.<%= field.fieldName %> ? new Date(res.body.<%= field.fieldName %>) : undefined;
            <%_ } _%>
        <%_ } _%>
        }
        return res;
    }

    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {
        if (res.body) {
            res.body.forEach ((<%= entityInstance %>: I<%= entityAngularName %>) => {
            <%_ for (const field of fields) { _%>
                <%_ if ( ['Instant', 'ZonedDateTime', 'LocalDate'].includes(field.fieldType) ) { _%>
                <%= entityInstance %>.<%= field.fieldName %> = <%= entityInstance %>.<%= field.fieldName %> ? new Date(<%= entityInstance %>.<%= field.fieldName %>) : undefined;
                <%_ } _%>
            <%_ } _%>
            });
        }
        return res;
    }
<%_ } _%>
}
