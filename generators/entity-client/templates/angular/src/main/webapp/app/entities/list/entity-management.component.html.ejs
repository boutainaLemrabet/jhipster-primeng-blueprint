<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<div>
    <h2 id="page-heading" data-cy="<%= entityClass %>Heading">
        <span <%= jhiPrefix %>Translate="<%= i18nKeyPrefix %>.home.title"><%= entityClassPluralHumanized %></span>
        <%_ if (!readOnly) { _%>
        <p-button id="jh-create-entity" class="float-right jh-create-entity create-<%= entityUrl %>" [routerLink]="['/<%= entityUrl %>/new']"
                  [label]="'<%= i18nKeyPrefix %>.home.createLabel' | translate" icon="pi pi-plus" iconPos="left">
        </p-button>
        <%_ } _%>
    </h2>
    <%_ if (searchEngine !== false) { _%>
    <div class="row">
        <div class="col-sm-12">
            <form name="searchForm" class="form-inline">
                <div class="input-group w-100 mt-3">
                    <input type="text" class="form-control" [(ngModel)]="currentSearch" id="currentSearch" name="currentSearch" placeholder="<% if (enableTranslation) { %>{{ '<%= i18nKeyPrefix %>.home.search' | translate }}<% } else { %>Query<% } %>">
                    <button pButton (click)="search(currentSearch)" icon="pi pi-search">
                    </button>
                    <button pButton class="ui-button-danger" (click)="search('')" *ngIf="currentSearch" icon="pi pi-trash">
                    </button>
                </div>
            </form>
        </div>
    </div>
    <%_ } _%>
    <br/>
    <p-table #<%= entityInstance %>Table [value]="<%= entityInstancePlural %>!" [rowTrackBy]="trackId" [responsive]="true"<%
    if (pagination !== 'no') {
        %> [lazy]="true" [rows]="itemsPerPage" [totalRecords]="totalItems!" [loading]="loading" sortMode="multiple" [lazyLoadOnInit]="false"<%
        if (pagination === 'infinite-scroll') {
            %> [scrollable]="true" [virtualScroll]="true" (onLazyLoad)="onLazyLoadEvent($event)" scrollHeight="200px" [virtualRowHeight]="34" <%
        } else if (pagination === 'pagination') {
            %> [paginator]="true" (onLazyLoad)="onLazyLoadEvent($event)" <%
        }
    }
    %>>
        <%_ if (searchEngine === 'elasticsearch') { _%>
        <ng-template pTemplate="caption">
            <div style="text-align: right">
                <i class="pi pi-search" style="margin:4px 4px 0 0"></i>
                <input pInputText type="text" placeholder="Global Filter" [ngModel]="filters.global?.value"
                       (ngModelChange)="filter($event, 'global')" style="width:auto">
            </div>
        </ng-template>
        <%_ } _%>
        <ng-template pTemplate="header">
            <tr>
                <%_ for (const field of fields) { _%>
                <th<% if (pagination !== 'no') { %> pSortableColumn="<%= field.fieldName %>"<% } %>>
                    <span <%= jhiPrefix %>Translate="<%=`${i18nKeyPrefix}.${field.fieldName}` %>"><%= field.fieldNameHumanized %></span>
                    <%_ if (pagination !== 'no') { _%>
                    <p-sortIcon field="<%= field.fieldName %>"></p-sortIcon>
                    <%_ } _%>
                </th>
                <%_ } _%>
                <%_ function generateHeader(relationship, motherRelationshipName) {
                    if (pagination !== 'no') {
    return `<th pSortableColumn="${motherRelationshipName}.${relationship.relationshipName}">
                     <span jhiTranslate="${i18nKeyPrefix}.${motherRelationshipName}.${relationship.relationshipName}">${_.startCase(relationship.otherEntityName)}</span>
                     <p-sortIcon field="${motherRelationshipName}.${relationship.relationshipName}"></p-sortIcon>
                </th>
                        ${relationship.otherEntity.relationships.filter(r => r.id).map(r => generateHeader(r, motherRelationshipName + '.' + relationship.relationshipName))}`
                    } else {
    return `<th>
                      <span jhiTranslate="${i18nKeyPrefix}.${motherRelationshipName}.${relationship.relationshipName}">${_.startCase(relationship.otherEntityName)}</span>
                </th>
               ${relationship.otherEntity.relationships.filter(r => r.id).map(r => generateHeader(r, motherRelationshipName + '.' + relationship.relationshipName)).join('')}`
                    }
                } _%>
                    <%_ for (const relationship of relationships) {
                        const relationshipType = relationship.relationshipType;
                        const ownerSide = relationship.ownerSide;
                    if (relationshipType === 'many-to-one'
                            || (relationshipType === 'one-to-one' && ownerSide === true)
                            || (relationshipType === 'many-to-many' && ownerSide === true && pagination === 'no')) { _%>
                <th<% if (pagination !== 'no') { %> pSortableColumn="<%= relationship.relationshipName %>"<% } %>>
                    <span jhiTranslate="<%= `${i18nKeyPrefix}.${relationship.relationshipName}` %>"><%= _.startCase(relationship.otherEntityName) %></span>
                    <% if (pagination !== 'no') { %><p-sortIcon field="<%= relationship.relationshipName %>"></p-sortIcon><% } %>
                </th>
               <%- relationship.otherEntity.relationships.filter(r => r.id).map(r => generateHeader(r, relationship.relationshipName)).join('') -%>
                    <%_ } _%>
                    <%_ } _%>
       <th style="width: 124px"></th>
            </tr>
            <%_ if (jpaMetamodelFiltering) { _%>
            <tr>
                <%_ for (const field of fields) {
                    const fieldType = field.fieldType;_%>
                <th>
                    <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType)) { _%>
                    <%_ } else if (fieldType === 'Boolean') { _%>
                    <p-triStateCheckbox [ngModel]="filters.billable?.value"
                                        (ngModelChange)="filter($event, '<%= field.fieldName %>')"></p-triStateCheckbox>
                    <%_ } else if (field.fieldIsEnum) { _%>
                    <p-multiSelect [options]="<%= field.fieldName %>Options!" [ngModel]="filters.<%= field.fieldName %>?.value"
                                   (ngModelChange)="filter($event, '<%= field.fieldName %>')">
                        <ng-template let-<%= field.fieldName %> pTemplate="item">{{'<%= `${frontendAppName}.${field.fieldType}` %>.' + <%= field.fieldName %>.label | translate}}</ng-template>
                    </p-multiSelect>
                    <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                        <%_ if (pagination !== 'no') { _%>
                    <p-calendar [(ngModel)]="<%= field.fieldName %>Range" selectionMode="range" [readonlyInput]="true" [showButtonBar]="true" showTime="true" hourFormat="24"
                                (onSelect)="onDateSelect(<%= field.fieldName %>Range, '<%= field.fieldName %>', true)" (onClearClick)="onDateSelect(<%= field.fieldName %>Range, '<%= field.fieldName %>', true)"></p-calendar>
                        <%_ } _%>
                    <%_ } else if (fieldType === 'LocalDate') { _%>
                        <%_ if (pagination !== 'no') { _%>
                    <p-calendar [(ngModel)]="<%= field.fieldName %>Range" selectionMode="range" [readonlyInput]="true" [showButtonBar]="true"
                                (onSelect)="onDateSelect(<%= field.fieldName %>Range, '<%= field.fieldName %>')" (onClearClick)="onDateSelect(<%= field.fieldName %>Range, '<%= field.fieldName %>')"></p-calendar>
                        <%_ } _%>
                    <%_ } else if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal', 'Duration'].includes(fieldType)) { _%>
                    <input pInputText type="number" [ngModel]="filters.<%= field.fieldName %>?.value"
                           (ngModelChange)="filter($event, '<%= field.fieldName %>')">
                    <%_ } else { _%>
                    <input pInputText type="text" [ngModel]="filters.<%= field.fieldName %>?.value"
                           (ngModelChange)="filter($event, '<%= field.fieldName %>')">
                    <%_ } _%>
                </th>
                <%_ } _%>
                <%_ function generateMultiSelects(relationship, motherRelationshipName) {
                    if (relationship.pagination === 'no') {
                        return `<th>
                        <p-multiSelect [options]="${relationship.relationshipName}Options!"
                                    [ngModel]="filters['${motherRelationshipName}.${relationship.relationshipName}.${relationship.otherEntity.fields.filter(f => f.id)[0].fieldName}']?.value"
                                    optionLabel="${relationship.otherEntityField}" optionValue="${relationship.otherEntity.fields.filter(f => f.id)[0].fieldName}"
                                    (ngModelChange)="filter($event, '${motherRelationshipName}.${relationship.relationshipName}.${relationship.otherEntity.fields.filter(f => f.id)[0].fieldName}')"></p-multiSelect>
                </th>
                    ${relationship.otherEntity.relationships.filter(r => r.id).map(r => generateMultiSelects(r, motherRelationshipName + '.' + relationship.relationshipName)).join('')}`;
                    } else {
                        return `<th>
                        <p-multiSelect [options]="${relationship.relationshipName}Options!"
                                      [ngModel]="filters['${motherRelationshipName}.${relationship.relationshipName}.${relationship.otherEntity.fields.filter(f => f.id)[0].fieldName}']?.value"
                                      optionLabel="${relationship.otherEntityField}" optionValue="${relationship.otherEntity.fields.filter(f => f.id)[0].fieldName}"
                                      [lazy]="true" [rows]="10" (onLazyLoad)="on${relationship.relationshipNameCapitalized}LazyLoadEvent($event)"
                                      (ngModelChange)="filter($event, '${motherRelationshipName}.${relationship.relationshipName}.${relationship.otherEntity.fields.filter(f => f.id)[0].fieldName}')"></p-multiSelect>
                </th>
                    ${relationship.otherEntity.relationships.filter(r => r.id).map(r => generateMultiSelects(r, motherRelationshipName + '.' + relationship.relationshipName)).join('')}`;
                    }
                }_%>
                <%_ for (const relationship of relationships) {
                    const relationshipType = relationship.relationshipType;
                    const ownerSide = relationship.ownerSide;
                    if (relationshipType === 'many-to-one'
                            || (relationshipType === 'one-to-one' && ownerSide === true)
                            || (relationshipType === 'many-to-many' && ownerSide === true && pagination === 'no')) {
                    if(!relationship.otherEntity.primaryKey.composite ||(relationship.otherEntity.primaryKey.composite && relationship.otherEntity.fields.filter(f => f.id).length > 0)) { _%>
                        <th>
                            <p-multiSelect [options]="<%= relationship.relationshipName %>Options!" [ngModel]="filters['<%= relationship.relationshipName %>.<%= relationship.otherEntity.fields.filter(f => f.id)[0].fieldName %>']?.value"
                                           optionLabel="<%= relationship.otherEntityField %>" optionValue="<%= relationship.otherEntity.fields.filter(f => f.id)[0].fieldName %>"
                                           <% if(relationship.pagination !== 'no') { %>[lazy]="true" [rows]="10" (onLazyLoad)="on<%= relationship.relationshipNameCapitalized %>LazyLoadEvent($event)"<% } %>
                                           (ngModelChange)="filter($event, '<%= relationship.relationshipName %>.<%= relationship.otherEntity.fields.filter(f => f.id)[0].fieldName %>')"></p-multiSelect>
                        </th>
                    <%_}_%>
                     <%- relationship.otherEntity.relationships.filter(r => r.id).map(r => generateMultiSelects(r, relationship.relationshipName)).join('') -%>
                <%_ } _%>
                <%_ } _%>
                <th></th>
            </tr>
        <%_ } _%>
        </ng-template>
        <ng-template pTemplate="body" let-<%=entityInstance %>>
            <tr>
                <%_
                const keys = entity.primaryKey.ids.length === 1 ? `${entityInstance}!.${entity.primaryKey.name}!` : `{ ${entity.primaryKey.ids.map(pk => `${pk.name}: ${entityInstance}!.${pk.nameDottedAsserted}`).join(', ')} }`;
                const routerLink = ` [routerLink]="['/${ entityUrl }', ${ keys }, 'view']"`;
                for ([idx, field] of fields.filter(field => !field.hidden).entries()) {
                    const fieldName = field.fieldName;
                    const fieldNameCapitalized = field.fieldNameCapitalized;
                    const fieldType = field.fieldType;
                    const fieldTypeBlobContent = field.fieldTypeBlobContent;
                _%>
                    <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent === 'image') { _%>
                    <td>
                        <a *ngIf="<%= entityInstance %>.<%= fieldName %>" (click)="openFile(<%= entityInstance %>.<%= fieldName %>, <%= entityInstance %>.<%= fieldName %>ContentType)">
                            <img [src]="'data:' + <%= entityInstance %>.<%= fieldName %>ContentType + ';base64,' + <%= entityInstance %>.<%= fieldName %>" style="max-height: 30px;" alt="<%= entityInstance %> image"/>
                        </a>
                        <span *ngIf="<%= entityInstance %>.<%= fieldName %>">{{ <%= entityInstance %>.<%= fieldName %>ContentType }}, {{ byteSize(<%= entityInstance %>.<%= fieldName %>) }}</span>
                    </td>
                    <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent === 'any') { _%>
                    <td>
                        <a *ngIf="<%= entityInstance %>.<%= fieldName %>" (click)="openFile(<%= entityInstance %>.<%= fieldName %>, <%= entityInstance %>.<%= fieldName %>ContentType)" <%= jhiPrefix %>Translate="entity.action.open">open</a>
                        <span *ngIf="<%= entityInstance %>.<%= fieldName %>">{{ <%= entityInstance %>.<%= fieldName %>ContentType }}, {{ byteSize(<%= entityInstance %>.<%= fieldName %>) }}</span>
                    </td>
                    <%_ } else if (field.fieldIsEnum) { _%>
                    <td<% if (field.id) { %>><a<%- routerLink %><% } %> <%= jhiPrefix %>Translate="{{ '<%= frontendAppName %>.<%= fieldType %>.' + <%= entityInstance %>.<%= fieldName %> }}">{{ <%= entityInstance %>.<%= fieldName %> }}<% if (field.id) { %></a><% } %></td>
                    <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                    <td>{{ <%= entityInstance %>.<%= fieldName %> | date:'medium' }}</td>
                    <%_ } else if (fieldType === 'LocalDate') { _%>
                    <td>{{ <%= entityInstance %>.<%= fieldName %> | date:'mediumDate'}}</td>
                    <%_ } else if (fieldType === 'Duration') { _%>
                    <td title="{{ <%= entityInstance %>.<%= fieldName %> }}">{{ <%= entityInstance %>.<%= fieldName %> | duration }}</td>
                    <%_ } else { _%>
                    <td<% if (field.id) { %>><a<%- routerLink %><% } %>>{{ <%= entityInstance %>.<%= fieldName %> }}<% if (field.id) { %></a><% } %></td>
                    <%_ } _%>
                <%_ } _%>

                <%_ function generatebody(relationship, motherRelationshipName) {
                    const relationshipFieldName = relationship.relationshipFieldName;
                    const otherEntityStateName = relationship.otherEntityStateName;
                    const otherEntity = relationship.otherEntity;
                    const instance =  `${entityInstance}!.${motherRelationshipName}!.${relationshipFieldName}`;
                    const relationshipKeys = otherEntity.primaryKey.ids.length === 1 ? `${instance}!.${otherEntity.primaryKey.name}!` : `{ ${otherEntity.primaryKey.ids.map(pk => `${pk.name}: ${instance}!.${pk.nameDottedAsserted}`).join(', ')} }`;
                    const routerLink = `[routerLink]="['/${ otherEntityStateName }', ${ relationshipKeys }, 'view']"`;

                    let result = `
                    ${relationship.otherEntity.relationships.filter(r => r.id).map(r => generatebody(r,  motherRelationshipName + '!.' + relationship.relationshipName)).join('')}`;
                    if (relationship.otherEntityField) {
                        result += `
                    <td>
                        <div *ngIf="${entityInstance}.${motherRelationshipName}.${relationshipFieldName}">
                            <a ${routerLink}>{{ ${instance}!.${relationship.otherEntityField} }}</a>
                        </div>
                    </td>`;
                    }
                }_%>
            <%_ for (const relationship of relationships) {
                const relationshipType = relationship.relationshipType;
                const ownerSide = relationship.ownerSide;
                if (relationshipType === 'many-to-one'
                        || (relationshipType === 'one-to-one' && ownerSide === true)
                        || (relationshipType === 'many-to-many' && ownerSide === true && pagination === 'no')) {
                    const relationshipFieldName = relationship.relationshipFieldName;
                    const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
                    const otherEntityName = relationship.otherEntityName;
                    const otherEntityStateName = relationship.otherEntityStateName;
                    const otherEntity = relationship.otherEntity;
                    const instance = relationshipType === 'many-to-many' ? relationshipFieldName : `${entityInstance}!.${relationshipFieldName}`;
                    const relationshipKeys = otherEntity.primaryKey.ids.length === 1 ? `${instance}!.${otherEntity.primaryKey.name}!` : `{ ${otherEntity.primaryKey.ids.map(pk => `${pk.name}: ${instance}!.${pk.nameDottedAsserted}`).join(', ')} }`;
                    const routerLink = `[routerLink]="['/${ otherEntityStateName }', ${ relationshipKeys }, 'view']"`;
            _%>
                        <%_ if (otherEntityName === 'user') { _%>
                            <%_ if (relationshipType === 'many-to-many') { _%>
                    <td>
                        <span *ngFor="let <%= relationshipFieldName %> of <%= entityInstance %>.<%= relationshipFieldNamePlural %>; let last = last">
                            {{ <%- instance %>!.<%- relationship.otherEntityField -%> }}{{ last ? '' : ', ' }}
                        </span>
                    </td>
                            <%_ } else { _%>
                    <td>
                        <div *ngIf="<%= entityInstance + "." + relationshipFieldName %>">
                            {{ <%- instance %>!.<%- relationship.otherEntityField -%> }}
                        </div>
                    </td>
                            <%_ } _%>
                        <%_ } else { _%>
                            <%_ if (relationshipType === 'many-to-many') { _%>
                                <%_ if (!relationship.otherEntity.primaryKey.composite) { _%>
                    <td>
                        <span *ngFor="let <%= relationshipFieldName %> of <%= entityInstance %>.<%= relationshipFieldNamePlural %>; let last = last">
                            <a class="form-control-static" <%- routerLink %>>{{ <%- instance %>!.<%- relationship.otherEntityField -%> }}</a>{{ last ? '' : ', ' }}
                        </span>
                    </td>
                                <%_ } _%>
                            <%_ } else { _%>
                                <%- relationship.otherEntity.relationships.filter(r => r.id).map(r => generatebody(r, relationship.relationshipName)).join('') -%>
                    <td>
                        <div *ngIf="<%= entityInstance + "." + relationshipFieldName %>">
                            <a <%- routerLink %>>{{ <%- instance %>!.<%- relationship.otherEntityField -%> }}</a>
                        </div>
                    </td>
                            <%_ } _%>
                        <%_ } _%>
                <%_ } _%>
            <%_ } _%>
                <td>
                    <div class="btn-group flex-btn-group-container">
<%_ const idParam = entity.primaryKey.ids.length === 1 ? `${entityInstance}.${entity.primaryKey.name}!` : '{ '+ entity.primaryKey.ids.map(pk => `${pk.name}: ${entityInstance}!.${pk.nameDottedAsserted}`).join(', ') + ' }' _%>
                        <p-button type="submit" [routerLink]="['/<%= entityUrl %>', <%- idParam %>, 'view' ]"
                                  icon="pi pi-eye" styleClass="ui-button-info">
                        </p-button>
                        <%_ if (!readOnly) { _%>
                        <p-button type="submit" [routerLink]="['/<%= entityUrl %>', <%- idParam %>, 'edit' ]"
                                  icon="pi pi-pencil" styleClass="ui-button-warning" data-cy="entityEditButton">
                        </p-button>
                            <%_ if(entity.primaryKey.ids.length === 1) {_%>
                        <p-button type="submit" (click)="delete(<%= entityInstance %>.<%= entity.primaryKey.name %>)"
                                          icon="pi pi-times" styleClass="ui-button-danger" data-cy="entityDeleteButton">
                        </p-button> <%_ } else {_%>
                        <p-button type="submit" (click)="delete(<%= entity.primaryKey.ids.map(pk => `${entityInstance}!.${pk.nameDottedAsserted}`).join(', ') %>)"
                                          icon="pi pi-times" styleClass="ui-button-danger" data-cy="entityDeleteButton">
                        </p-button>
                            <%_ } _%>
                        <%_ } _%>
                    </div>
                </td>
            </tr>
        </ng-template>
    </p-table>
</div>
